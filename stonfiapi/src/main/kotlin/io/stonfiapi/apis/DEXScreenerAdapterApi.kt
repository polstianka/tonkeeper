/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.stonfiapi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import io.stonfiapi.models.ScreenerAssetInfo200Response
import io.stonfiapi.models.ScreenerEvents200Response
import io.stonfiapi.models.ScreenerLatestBlock200Response
import io.stonfiapi.models.ScreenerPoolInfo200Response

import com.squareup.moshi.Json

import io.stonfiapi.infrastructure.ApiClient
import io.stonfiapi.infrastructure.ApiResponse
import io.stonfiapi.infrastructure.ClientException
import io.stonfiapi.infrastructure.ClientError
import io.stonfiapi.infrastructure.ServerException
import io.stonfiapi.infrastructure.ServerError
import io.stonfiapi.infrastructure.MultiValueMap
import io.stonfiapi.infrastructure.PartConfig
import io.stonfiapi.infrastructure.RequestConfig
import io.stonfiapi.infrastructure.RequestMethod
import io.stonfiapi.infrastructure.ResponseType
import io.stonfiapi.infrastructure.Success
import io.stonfiapi.infrastructure.toMultiValue

class DEXScreenerAdapterApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * 
     * 
     * @param id Address of the asset
     * @return ScreenerAssetInfo200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun screenerAssetInfo(id: kotlin.String) : ScreenerAssetInfo200Response {
        val localVarResponse = screenerAssetInfoWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ScreenerAssetInfo200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param id Address of the asset
     * @return ApiResponse<ScreenerAssetInfo200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun screenerAssetInfoWithHttpInfo(id: kotlin.String) : ApiResponse<ScreenerAssetInfo200Response?> {
        val localVariableConfig = screenerAssetInfoRequestConfig(id = id)

        return request<Unit, ScreenerAssetInfo200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation screenerAssetInfo
     *
     * @param id Address of the asset
     * @return RequestConfig
     */
    fun screenerAssetInfoRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("id", listOf(id.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/screener/asset",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param fromBlock Block number of the response events start (inclusive)
     * @param toBlock Block number of the response events end (inclusive)
     * @return ScreenerEvents200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun screenerEvents(fromBlock: kotlin.Int, toBlock: kotlin.Int) : ScreenerEvents200Response {
        val localVarResponse = screenerEventsWithHttpInfo(fromBlock = fromBlock, toBlock = toBlock)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ScreenerEvents200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param fromBlock Block number of the response events start (inclusive)
     * @param toBlock Block number of the response events end (inclusive)
     * @return ApiResponse<ScreenerEvents200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun screenerEventsWithHttpInfo(fromBlock: kotlin.Int, toBlock: kotlin.Int) : ApiResponse<ScreenerEvents200Response?> {
        val localVariableConfig = screenerEventsRequestConfig(fromBlock = fromBlock, toBlock = toBlock)

        return request<Unit, ScreenerEvents200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation screenerEvents
     *
     * @param fromBlock Block number of the response events start (inclusive)
     * @param toBlock Block number of the response events end (inclusive)
     * @return RequestConfig
     */
    fun screenerEventsRequestConfig(fromBlock: kotlin.Int, toBlock: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("fromBlock", listOf(fromBlock.toString()))
                put("toBlock", listOf(toBlock.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/screener/events",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @return ScreenerLatestBlock200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun screenerLatestBlock() : ScreenerLatestBlock200Response {
        val localVarResponse = screenerLatestBlockWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ScreenerLatestBlock200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @return ApiResponse<ScreenerLatestBlock200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun screenerLatestBlockWithHttpInfo() : ApiResponse<ScreenerLatestBlock200Response?> {
        val localVariableConfig = screenerLatestBlockRequestConfig()

        return request<Unit, ScreenerLatestBlock200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation screenerLatestBlock
     *
     * @return RequestConfig
     */
    fun screenerLatestBlockRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/screener/latest-block",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param id Address of the liquidity pool
     * @return ScreenerPoolInfo200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun screenerPoolInfo(id: kotlin.String) : ScreenerPoolInfo200Response {
        val localVarResponse = screenerPoolInfoWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ScreenerPoolInfo200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param id Address of the liquidity pool
     * @return ApiResponse<ScreenerPoolInfo200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun screenerPoolInfoWithHttpInfo(id: kotlin.String) : ApiResponse<ScreenerPoolInfo200Response?> {
        val localVariableConfig = screenerPoolInfoRequestConfig(id = id)

        return request<Unit, ScreenerPoolInfo200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation screenerPoolInfo
     *
     * @param id Address of the liquidity pool
     * @return RequestConfig
     */
    fun screenerPoolInfoRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("id", listOf(id.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/screener/pair",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
