/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.stonfiapi.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import io.stonfiapi.models.DexReverseSimulateSwap200Response

class DexReverseSimulateSwap200ResponseTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of DexReverseSimulateSwap200Response
        //val modelInstance = DexReverseSimulateSwap200Response()

        // to test the property `askAddress` - Address of the wallet to which the operation is simulated
        should("test askAddress") {
            // uncomment below to test the property
            //modelInstance.askAddress shouldBe ("TODO")
        }

        // to test the property `askUnits` - Token units asked
        should("test askUnits") {
            // uncomment below to test the property
            //modelInstance.askUnits shouldBe ("TODO")
        }

        // to test the property `feeAddress` - Fee address
        should("test feeAddress") {
            // uncomment below to test the property
            //modelInstance.feeAddress shouldBe ("TODO")
        }

        // to test the property `feePercent` - fee percent
        should("test feePercent") {
            // uncomment below to test the property
            //modelInstance.feePercent shouldBe ("TODO")
        }

        // to test the property `feeUnits` - Fee units
        should("test feeUnits") {
            // uncomment below to test the property
            //modelInstance.feeUnits shouldBe ("TODO")
        }

        // to test the property `minAskUnits` - Minimal amount of ask units
        should("test minAskUnits") {
            // uncomment below to test the property
            //modelInstance.minAskUnits shouldBe ("TODO")
        }

        // to test the property `offerAddress` - Address of the wallet from which the operation is simulated
        should("test offerAddress") {
            // uncomment below to test the property
            //modelInstance.offerAddress shouldBe ("TODO")
        }

        // to test the property `offerUnits` - Token units offered
        should("test offerUnits") {
            // uncomment below to test the property
            //modelInstance.offerUnits shouldBe ("TODO")
        }

        // to test the property `poolAddress` - Address of the pool
        should("test poolAddress") {
            // uncomment below to test the property
            //modelInstance.poolAddress shouldBe ("TODO")
        }

        // to test the property `priceImpact` - Price impact
        should("test priceImpact") {
            // uncomment below to test the property
            //modelInstance.priceImpact shouldBe ("TODO")
        }

        // to test the property `routerAddress` - Address of the operation router
        should("test routerAddress") {
            // uncomment below to test the property
            //modelInstance.routerAddress shouldBe ("TODO")
        }

        // to test the property `slippageTolerance` - Difference between the original price of order and the final price
        should("test slippageTolerance") {
            // uncomment below to test the property
            //modelInstance.slippageTolerance shouldBe ("TODO")
        }

        // to test the property `swapRate` - Swap rate
        should("test swapRate") {
            // uncomment below to test the property
            //modelInstance.swapRate shouldBe ("TODO")
        }

    }
}
