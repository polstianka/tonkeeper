/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.tonapi.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import io.tonapi.apis.AccountsApi
import io.tonapi.models.Account
import io.tonapi.models.AccountEvent
import io.tonapi.models.AccountEvents
import io.tonapi.models.Accounts
import io.tonapi.models.AddressParse200Response
import io.tonapi.models.DnsExpiring
import io.tonapi.models.DomainNames
import io.tonapi.models.FoundAccounts
import io.tonapi.models.GetAccountDiff200Response
import io.tonapi.models.GetAccountPublicKey200Response
import io.tonapi.models.GetAccountsRequest
import io.tonapi.models.JettonsBalances
import io.tonapi.models.NftItems
import io.tonapi.models.StatusDefaultResponse
import io.tonapi.models.Subscriptions
import io.tonapi.models.TraceIDs

class AccountsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of AccountsApi
        //val apiInstance = AccountsApi()

        // to test accountDnsBackResolve
        should("test accountDnsBackResolve") {
            // uncomment below to test accountDnsBackResolve
            //val accountId : kotlin.String = 0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | account ID
            //val result : DomainNames = apiInstance.accountDnsBackResolve(accountId)
            //result shouldBe ("TODO")
        }

        // to test addressParse
        should("test addressParse") {
            // uncomment below to test addressParse
            //val accountId : kotlin.String = 0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | account ID
            //val result : AddressParse200Response = apiInstance.addressParse(accountId)
            //result shouldBe ("TODO")
        }

        // to test getAccount
        should("test getAccount") {
            // uncomment below to test getAccount
            //val accountId : kotlin.String = 0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | account ID
            //val result : Account = apiInstance.getAccount(accountId)
            //result shouldBe ("TODO")
        }

        // to test getAccountDiff
        should("test getAccountDiff") {
            // uncomment below to test getAccountDiff
            //val accountId : kotlin.String = 0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | account ID
            //val startDate : kotlin.Long = 1668436763 // kotlin.Long | 
            //val endDate : kotlin.Long = 1668436763 // kotlin.Long | 
            //val result : GetAccountDiff200Response = apiInstance.getAccountDiff(accountId, startDate, endDate)
            //result shouldBe ("TODO")
        }

        // to test getAccountDnsExpiring
        should("test getAccountDnsExpiring") {
            // uncomment below to test getAccountDnsExpiring
            //val accountId : kotlin.String = 0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | account ID
            //val period : kotlin.Int = 56 // kotlin.Int | number of days before expiration
            //val result : DnsExpiring = apiInstance.getAccountDnsExpiring(accountId, period)
            //result shouldBe ("TODO")
        }

        // to test getAccountEvent
        should("test getAccountEvent") {
            // uncomment below to test getAccountEvent
            //val accountId : kotlin.String = 0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | account ID
            //val eventId : kotlin.String = 97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | event ID or transaction hash in hex (without 0x) or base64url format
            //val acceptLanguage : kotlin.String = ru-RU,ru;q=0.5 // kotlin.String | 
            //val subjectOnly : kotlin.Boolean = true // kotlin.Boolean | filter actions where requested account is not real subject (for example sender or receiver jettons)
            //val result : AccountEvent = apiInstance.getAccountEvent(accountId, eventId, acceptLanguage, subjectOnly)
            //result shouldBe ("TODO")
        }

        // to test getAccountEvents
        should("test getAccountEvents") {
            // uncomment below to test getAccountEvents
            //val accountId : kotlin.String = 0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | account ID
            //val limit : kotlin.Int = 20 // kotlin.Int | 
            //val acceptLanguage : kotlin.String = ru-RU,ru;q=0.5 // kotlin.String | 
            //val initiator : kotlin.Boolean = true // kotlin.Boolean | Show only events that are initiated by this account
            //val subjectOnly : kotlin.Boolean = true // kotlin.Boolean | filter actions where requested account is not real subject (for example sender or receiver jettons)
            //val beforeLt : kotlin.Long = 25758317000002 // kotlin.Long | omit this parameter to get last events
            //val startDate : kotlin.Long = 1668436763 // kotlin.Long | 
            //val endDate : kotlin.Long = 1668436763 // kotlin.Long | 
            //val result : AccountEvents = apiInstance.getAccountEvents(accountId, limit, acceptLanguage, initiator, subjectOnly, beforeLt, startDate, endDate)
            //result shouldBe ("TODO")
        }

        // to test getAccountJettonHistoryByID
        should("test getAccountJettonHistoryByID") {
            // uncomment below to test getAccountJettonHistoryByID
            //val accountId : kotlin.String = 0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | account ID
            //val jettonId : kotlin.String = 0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | jetton ID
            //val limit : kotlin.Int = 100 // kotlin.Int | 
            //val acceptLanguage : kotlin.String = ru-RU,ru;q=0.5 // kotlin.String | 
            //val beforeLt : kotlin.Long = 25758317000002 // kotlin.Long | omit this parameter to get last events
            //val startDate : kotlin.Long = 1668436763 // kotlin.Long | 
            //val endDate : kotlin.Long = 1668436763 // kotlin.Long | 
            //val result : AccountEvents = apiInstance.getAccountJettonHistoryByID(accountId, jettonId, limit, acceptLanguage, beforeLt, startDate, endDate)
            //result shouldBe ("TODO")
        }

        // to test getAccountJettonsBalances
        should("test getAccountJettonsBalances") {
            // uncomment below to test getAccountJettonsBalances
            //val accountId : kotlin.String = 0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | account ID
            //val currencies : kotlin.collections.List<kotlin.String> = ["ton","usd","rub"] // kotlin.collections.List<kotlin.String> | accept ton and all possible fiat currencies, separated by commas
            //val result : JettonsBalances = apiInstance.getAccountJettonsBalances(accountId, currencies)
            //result shouldBe ("TODO")
        }

        // to test getAccountJettonsHistory
        should("test getAccountJettonsHistory") {
            // uncomment below to test getAccountJettonsHistory
            //val accountId : kotlin.String = 0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | account ID
            //val limit : kotlin.Int = 100 // kotlin.Int | 
            //val acceptLanguage : kotlin.String = ru-RU,ru;q=0.5 // kotlin.String | 
            //val beforeLt : kotlin.Long = 25758317000002 // kotlin.Long | omit this parameter to get last events
            //val startDate : kotlin.Long = 1668436763 // kotlin.Long | 
            //val endDate : kotlin.Long = 1668436763 // kotlin.Long | 
            //val result : AccountEvents = apiInstance.getAccountJettonsHistory(accountId, limit, acceptLanguage, beforeLt, startDate, endDate)
            //result shouldBe ("TODO")
        }

        // to test getAccountNftItems
        should("test getAccountNftItems") {
            // uncomment below to test getAccountNftItems
            //val accountId : kotlin.String = 0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | account ID
            //val collection : kotlin.String = 0:06d811f426598591b32b2c49f29f66c821368e4acb1de16762b04e0174532465 // kotlin.String | nft collection
            //val limit : kotlin.Int = 56 // kotlin.Int | 
            //val offset : kotlin.Int = 56 // kotlin.Int | 
            //val indirectOwnership : kotlin.Boolean = true // kotlin.Boolean | Selling nft items in ton implemented usually via transfer items to special selling account. This option enables including items which owned not directly.
            //val result : NftItems = apiInstance.getAccountNftItems(accountId, collection, limit, offset, indirectOwnership)
            //result shouldBe ("TODO")
        }

        // to test getAccountPublicKey
        should("test getAccountPublicKey") {
            // uncomment below to test getAccountPublicKey
            //val accountId : kotlin.String = 0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | account ID
            //val result : GetAccountPublicKey200Response = apiInstance.getAccountPublicKey(accountId)
            //result shouldBe ("TODO")
        }

        // to test getAccountSubscriptions
        should("test getAccountSubscriptions") {
            // uncomment below to test getAccountSubscriptions
            //val accountId : kotlin.String = 0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | account ID
            //val result : Subscriptions = apiInstance.getAccountSubscriptions(accountId)
            //result shouldBe ("TODO")
        }

        // to test getAccountTraces
        should("test getAccountTraces") {
            // uncomment below to test getAccountTraces
            //val accountId : kotlin.String = 0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | account ID
            //val limit : kotlin.Int = 100 // kotlin.Int | 
            //val result : TraceIDs = apiInstance.getAccountTraces(accountId, limit)
            //result shouldBe ("TODO")
        }

        // to test getAccounts
        should("test getAccounts") {
            // uncomment below to test getAccounts
            //val getAccountsRequest : GetAccountsRequest =  // GetAccountsRequest | a list of account ids
            //val result : Accounts = apiInstance.getAccounts(getAccountsRequest)
            //result shouldBe ("TODO")
        }

        // to test reindexAccount
        should("test reindexAccount") {
            // uncomment below to test reindexAccount
            //val accountId : kotlin.String = 0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | account ID
            //apiInstance.reindexAccount(accountId)
        }

        // to test searchAccounts
        should("test searchAccounts") {
            // uncomment below to test searchAccounts
            //val name : kotlin.String = name_example // kotlin.String | 
            //val result : FoundAccounts = apiInstance.searchAccounts(name)
            //result shouldBe ("TODO")
        }

    }
}
