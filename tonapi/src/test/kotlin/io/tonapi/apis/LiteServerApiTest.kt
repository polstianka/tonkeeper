/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.tonapi.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import io.tonapi.apis.LiteServerApi
import io.tonapi.models.GetAllRawShardsInfo200Response
import io.tonapi.models.GetOutMsgQueueSizes200Response
import io.tonapi.models.GetRawAccountState200Response
import io.tonapi.models.GetRawBlockProof200Response
import io.tonapi.models.GetRawBlockchainBlock200Response
import io.tonapi.models.GetRawBlockchainBlockHeader200Response
import io.tonapi.models.GetRawBlockchainBlockState200Response
import io.tonapi.models.GetRawConfig200Response
import io.tonapi.models.GetRawListBlockTransactions200Response
import io.tonapi.models.GetRawMasterchainInfo200Response
import io.tonapi.models.GetRawMasterchainInfoExt200Response
import io.tonapi.models.GetRawShardBlockProof200Response
import io.tonapi.models.GetRawShardInfo200Response
import io.tonapi.models.GetRawTime200Response
import io.tonapi.models.GetRawTransactions200Response
import io.tonapi.models.SendRawMessage200Response
import io.tonapi.models.SendRawMessageRequest
import io.tonapi.models.StatusDefaultResponse

class LiteServerApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of LiteServerApi
        //val apiInstance = LiteServerApi()

        // to test getAllRawShardsInfo
        should("test getAllRawShardsInfo") {
            // uncomment below to test getAllRawShardsInfo
            //val blockId : kotlin.String = (-1,8000000000000000,4234234,3E575DAB1D25...90D8,47192E5C46C...BB29) // kotlin.String | block ID: (workchain,shard,seqno,root_hash,file_hash)
            //val result : GetAllRawShardsInfo200Response = apiInstance.getAllRawShardsInfo(blockId)
            //result shouldBe ("TODO")
        }

        // to test getOutMsgQueueSizes
        should("test getOutMsgQueueSizes") {
            // uncomment below to test getOutMsgQueueSizes
            //val result : GetOutMsgQueueSizes200Response = apiInstance.getOutMsgQueueSizes()
            //result shouldBe ("TODO")
        }

        // to test getRawAccountState
        should("test getRawAccountState") {
            // uncomment below to test getRawAccountState
            //val accountId : kotlin.String = 0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | account ID
            //val targetBlock : kotlin.String = (-1,8000000000000000,4234234,3E575DAB1D25...90D8,47192E5C46C...BB29) // kotlin.String | target block: (workchain,shard,seqno,root_hash,file_hash)
            //val result : GetRawAccountState200Response = apiInstance.getRawAccountState(accountId, targetBlock)
            //result shouldBe ("TODO")
        }

        // to test getRawBlockProof
        should("test getRawBlockProof") {
            // uncomment below to test getRawBlockProof
            //val knownBlock : kotlin.String = (-1,8000000000000000,4234234,3E575DAB1D25...90D8,47192E5C46C...BB29) // kotlin.String | known block: (workchain,shard,seqno,root_hash,file_hash)
            //val mode : kotlin.Int = 0 // kotlin.Int | mode
            //val targetBlock : kotlin.String = (-1,8000000000000000,4234234,3E575DAB1D25...90D8,47192E5C46C...BB29) // kotlin.String | target block: (workchain,shard,seqno,root_hash,file_hash)
            //val result : GetRawBlockProof200Response = apiInstance.getRawBlockProof(knownBlock, mode, targetBlock)
            //result shouldBe ("TODO")
        }

        // to test getRawBlockchainBlock
        should("test getRawBlockchainBlock") {
            // uncomment below to test getRawBlockchainBlock
            //val blockId : kotlin.String = (-1,8000000000000000,4234234,3E575DAB1D25...90D8,47192E5C46C...BB29) // kotlin.String | block ID: (workchain,shard,seqno,root_hash,file_hash)
            //val result : GetRawBlockchainBlock200Response = apiInstance.getRawBlockchainBlock(blockId)
            //result shouldBe ("TODO")
        }

        // to test getRawBlockchainBlockHeader
        should("test getRawBlockchainBlockHeader") {
            // uncomment below to test getRawBlockchainBlockHeader
            //val blockId : kotlin.String = (-1,8000000000000000,4234234,3E575DAB1D25...90D8,47192E5C46C...BB29) // kotlin.String | block ID: (workchain,shard,seqno,root_hash,file_hash)
            //val mode : kotlin.Int = 0 // kotlin.Int | mode
            //val result : GetRawBlockchainBlockHeader200Response = apiInstance.getRawBlockchainBlockHeader(blockId, mode)
            //result shouldBe ("TODO")
        }

        // to test getRawBlockchainBlockState
        should("test getRawBlockchainBlockState") {
            // uncomment below to test getRawBlockchainBlockState
            //val blockId : kotlin.String = (-1,8000000000000000,4234234,3E575DAB1D25...90D8,47192E5C46C...BB29) // kotlin.String | block ID: (workchain,shard,seqno,root_hash,file_hash)
            //val result : GetRawBlockchainBlockState200Response = apiInstance.getRawBlockchainBlockState(blockId)
            //result shouldBe ("TODO")
        }

        // to test getRawConfig
        should("test getRawConfig") {
            // uncomment below to test getRawConfig
            //val blockId : kotlin.String = (-1,8000000000000000,4234234,3E575DAB1D25...90D8,47192E5C46C...BB29) // kotlin.String | block ID: (workchain,shard,seqno,root_hash,file_hash)
            //val mode : kotlin.Int = 0 // kotlin.Int | mode
            //val result : GetRawConfig200Response = apiInstance.getRawConfig(blockId, mode)
            //result shouldBe ("TODO")
        }

        // to test getRawListBlockTransactions
        should("test getRawListBlockTransactions") {
            // uncomment below to test getRawListBlockTransactions
            //val blockId : kotlin.String = (-1,8000000000000000,4234234,3E575DAB1D25...90D8,47192E5C46C...BB29) // kotlin.String | block ID: (workchain,shard,seqno,root_hash,file_hash)
            //val mode : kotlin.Int = 0 // kotlin.Int | mode
            //val count : kotlin.Int = 100 // kotlin.Int | count
            //val accountId : kotlin.String = 0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | account ID
            //val lt : kotlin.Long = 23814011000000 // kotlin.Long | lt
            //val result : GetRawListBlockTransactions200Response = apiInstance.getRawListBlockTransactions(blockId, mode, count, accountId, lt)
            //result shouldBe ("TODO")
        }

        // to test getRawMasterchainInfo
        should("test getRawMasterchainInfo") {
            // uncomment below to test getRawMasterchainInfo
            //val result : GetRawMasterchainInfo200Response = apiInstance.getRawMasterchainInfo()
            //result shouldBe ("TODO")
        }

        // to test getRawMasterchainInfoExt
        should("test getRawMasterchainInfoExt") {
            // uncomment below to test getRawMasterchainInfoExt
            //val mode : kotlin.Int = 0 // kotlin.Int | mode
            //val result : GetRawMasterchainInfoExt200Response = apiInstance.getRawMasterchainInfoExt(mode)
            //result shouldBe ("TODO")
        }

        // to test getRawShardBlockProof
        should("test getRawShardBlockProof") {
            // uncomment below to test getRawShardBlockProof
            //val blockId : kotlin.String = (-1,8000000000000000,4234234,3E575DAB1D25...90D8,47192E5C46C...BB29) // kotlin.String | block ID: (workchain,shard,seqno,root_hash,file_hash)
            //val result : GetRawShardBlockProof200Response = apiInstance.getRawShardBlockProof(blockId)
            //result shouldBe ("TODO")
        }

        // to test getRawShardInfo
        should("test getRawShardInfo") {
            // uncomment below to test getRawShardInfo
            //val blockId : kotlin.String = (-1,8000000000000000,4234234,3E575DAB1D25...90D8,47192E5C46C...BB29) // kotlin.String | block ID: (workchain,shard,seqno,root_hash,file_hash)
            //val workchain : kotlin.Int = 1 // kotlin.Int | workchain
            //val shard : kotlin.Long = 1 // kotlin.Long | shard
            //val exact : kotlin.Boolean = false // kotlin.Boolean | exact
            //val result : GetRawShardInfo200Response = apiInstance.getRawShardInfo(blockId, workchain, shard, exact)
            //result shouldBe ("TODO")
        }

        // to test getRawTime
        should("test getRawTime") {
            // uncomment below to test getRawTime
            //val result : GetRawTime200Response = apiInstance.getRawTime()
            //result shouldBe ("TODO")
        }

        // to test getRawTransactions
        should("test getRawTransactions") {
            // uncomment below to test getRawTransactions
            //val accountId : kotlin.String = 0:97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621 // kotlin.String | account ID
            //val count : kotlin.Int = 100 // kotlin.Int | count
            //val lt : kotlin.Long = 23814011000000 // kotlin.Long | lt
            //val hash : kotlin.String = 131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85 // kotlin.String | hash
            //val result : GetRawTransactions200Response = apiInstance.getRawTransactions(accountId, count, lt, hash)
            //result shouldBe ("TODO")
        }

        // to test sendRawMessage
        should("test sendRawMessage") {
            // uncomment below to test sendRawMessage
            //val sendRawMessageRequest : SendRawMessageRequest =  // SendRawMessageRequest | Data that is expected
            //val result : SendRawMessage200Response = apiInstance.sendRawMessage(sendRawMessageRequest)
            //result shouldBe ("TODO")
        }

    }
}
