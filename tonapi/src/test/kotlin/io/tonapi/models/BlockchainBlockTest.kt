/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.tonapi.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import io.tonapi.models.BlockchainBlock
import io.tonapi.models.BlockValueFlow

class BlockchainBlockTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of BlockchainBlock
        //val modelInstance = BlockchainBlock()

        // to test the property `txQuantity`
        should("test txQuantity") {
            // uncomment below to test the property
            //modelInstance.txQuantity shouldBe ("TODO")
        }

        // to test the property `valueFlow`
        should("test valueFlow") {
            // uncomment below to test the property
            //modelInstance.valueFlow shouldBe ("TODO")
        }

        // to test the property `workchainId`
        should("test workchainId") {
            // uncomment below to test the property
            //modelInstance.workchainId shouldBe ("TODO")
        }

        // to test the property `shard`
        should("test shard") {
            // uncomment below to test the property
            //modelInstance.shard shouldBe ("TODO")
        }

        // to test the property `seqno`
        should("test seqno") {
            // uncomment below to test the property
            //modelInstance.seqno shouldBe ("TODO")
        }

        // to test the property `rootHash`
        should("test rootHash") {
            // uncomment below to test the property
            //modelInstance.rootHash shouldBe ("TODO")
        }

        // to test the property `fileHash`
        should("test fileHash") {
            // uncomment below to test the property
            //modelInstance.fileHash shouldBe ("TODO")
        }

        // to test the property `globalId`
        should("test globalId") {
            // uncomment below to test the property
            //modelInstance.globalId shouldBe ("TODO")
        }

        // to test the property `version`
        should("test version") {
            // uncomment below to test the property
            //modelInstance.version shouldBe ("TODO")
        }

        // to test the property `afterMerge`
        should("test afterMerge") {
            // uncomment below to test the property
            //modelInstance.afterMerge shouldBe ("TODO")
        }

        // to test the property `beforeSplit`
        should("test beforeSplit") {
            // uncomment below to test the property
            //modelInstance.beforeSplit shouldBe ("TODO")
        }

        // to test the property `afterSplit`
        should("test afterSplit") {
            // uncomment below to test the property
            //modelInstance.afterSplit shouldBe ("TODO")
        }

        // to test the property `wantSplit`
        should("test wantSplit") {
            // uncomment below to test the property
            //modelInstance.wantSplit shouldBe ("TODO")
        }

        // to test the property `wantMerge`
        should("test wantMerge") {
            // uncomment below to test the property
            //modelInstance.wantMerge shouldBe ("TODO")
        }

        // to test the property `keyBlock`
        should("test keyBlock") {
            // uncomment below to test the property
            //modelInstance.keyBlock shouldBe ("TODO")
        }

        // to test the property `genUtime`
        should("test genUtime") {
            // uncomment below to test the property
            //modelInstance.genUtime shouldBe ("TODO")
        }

        // to test the property `startLt`
        should("test startLt") {
            // uncomment below to test the property
            //modelInstance.startLt shouldBe ("TODO")
        }

        // to test the property `endLt`
        should("test endLt") {
            // uncomment below to test the property
            //modelInstance.endLt shouldBe ("TODO")
        }

        // to test the property `vertSeqno`
        should("test vertSeqno") {
            // uncomment below to test the property
            //modelInstance.vertSeqno shouldBe ("TODO")
        }

        // to test the property `genCatchainSeqno`
        should("test genCatchainSeqno") {
            // uncomment below to test the property
            //modelInstance.genCatchainSeqno shouldBe ("TODO")
        }

        // to test the property `minRefMcSeqno`
        should("test minRefMcSeqno") {
            // uncomment below to test the property
            //modelInstance.minRefMcSeqno shouldBe ("TODO")
        }

        // to test the property `prevKeyBlockSeqno`
        should("test prevKeyBlockSeqno") {
            // uncomment below to test the property
            //modelInstance.prevKeyBlockSeqno shouldBe ("TODO")
        }

        // to test the property `prevRefs`
        should("test prevRefs") {
            // uncomment below to test the property
            //modelInstance.prevRefs shouldBe ("TODO")
        }

        // to test the property `inMsgDescrLength`
        should("test inMsgDescrLength") {
            // uncomment below to test the property
            //modelInstance.inMsgDescrLength shouldBe ("TODO")
        }

        // to test the property `outMsgDescrLength`
        should("test outMsgDescrLength") {
            // uncomment below to test the property
            //modelInstance.outMsgDescrLength shouldBe ("TODO")
        }

        // to test the property `randSeed`
        should("test randSeed") {
            // uncomment below to test the property
            //modelInstance.randSeed shouldBe ("TODO")
        }

        // to test the property `createdBy`
        should("test createdBy") {
            // uncomment below to test the property
            //modelInstance.createdBy shouldBe ("TODO")
        }

        // to test the property `genSoftwareVersion`
        should("test genSoftwareVersion") {
            // uncomment below to test the property
            //modelInstance.genSoftwareVersion shouldBe ("TODO")
        }

        // to test the property `genSoftwareCapabilities`
        should("test genSoftwareCapabilities") {
            // uncomment below to test the property
            //modelInstance.genSoftwareCapabilities shouldBe ("TODO")
        }

        // to test the property `masterRef`
        should("test masterRef") {
            // uncomment below to test the property
            //modelInstance.masterRef shouldBe ("TODO")
        }

    }
}
