/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.tonapi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import io.tonapi.models.GetChartRates200Response
import io.tonapi.models.GetMarketsRates200Response
import io.tonapi.models.GetRates200Response
import io.tonapi.models.StatusDefaultResponse

import com.squareup.moshi.Json

import io.tonapi.infrastructure.ApiClient
import io.tonapi.infrastructure.ApiResponse
import io.tonapi.infrastructure.ClientException
import io.tonapi.infrastructure.ClientError
import io.tonapi.infrastructure.ServerException
import io.tonapi.infrastructure.ServerError
import io.tonapi.infrastructure.MultiValueMap
import io.tonapi.infrastructure.PartConfig
import io.tonapi.infrastructure.RequestConfig
import io.tonapi.infrastructure.RequestMethod
import io.tonapi.infrastructure.ResponseType
import io.tonapi.infrastructure.Success
import io.tonapi.infrastructure.toMultiValue

class RatesApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://tonapi.io")
        }
    }

    /**
     * 
     * Get chart by token
     * @param token accept jetton master address
     * @param currency  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param pointsCount  (optional, default to 200)
     * @return GetChartRates200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getChartRates(token: kotlin.String, currency: kotlin.String? = null, startDate: kotlin.Long? = null, endDate: kotlin.Long? = null, pointsCount: kotlin.Int? = 200) : GetChartRates200Response {
        val localVarResponse = getChartRatesWithHttpInfo(token = token, currency = currency, startDate = startDate, endDate = endDate, pointsCount = pointsCount)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetChartRates200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Get chart by token
     * @param token accept jetton master address
     * @param currency  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param pointsCount  (optional, default to 200)
     * @return ApiResponse<GetChartRates200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getChartRatesWithHttpInfo(token: kotlin.String, currency: kotlin.String?, startDate: kotlin.Long?, endDate: kotlin.Long?, pointsCount: kotlin.Int?) : ApiResponse<GetChartRates200Response?> {
        val localVariableConfig = getChartRatesRequestConfig(token = token, currency = currency, startDate = startDate, endDate = endDate, pointsCount = pointsCount)

        return request<Unit, GetChartRates200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getChartRates
     *
     * @param token accept jetton master address
     * @param currency  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param pointsCount  (optional, default to 200)
     * @return RequestConfig
     */
    fun getChartRatesRequestConfig(token: kotlin.String, currency: kotlin.String?, startDate: kotlin.Long?, endDate: kotlin.Long?, pointsCount: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                if (currency != null) {
                    put("currency", listOf(currency.toString()))
                }
                if (startDate != null) {
                    put("start_date", listOf(startDate.toString()))
                }
                if (endDate != null) {
                    put("end_date", listOf(endDate.toString()))
                }
                if (pointsCount != null) {
                    put("points_count", listOf(pointsCount.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/rates/chart",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Get the TON price from markets
     * @return GetMarketsRates200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getMarketsRates() : GetMarketsRates200Response {
        val localVarResponse = getMarketsRatesWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetMarketsRates200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Get the TON price from markets
     * @return ApiResponse<GetMarketsRates200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getMarketsRatesWithHttpInfo() : ApiResponse<GetMarketsRates200Response?> {
        val localVariableConfig = getMarketsRatesRequestConfig()

        return request<Unit, GetMarketsRates200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getMarketsRates
     *
     * @return RequestConfig
     */
    fun getMarketsRatesRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/rates/markets",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Get the token price to the currency
     * @param tokens accept ton and jetton master addresses, separated by commas
     * @param currencies accept ton and all possible fiat currencies, separated by commas
     * @return GetRates200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getRates(tokens: kotlin.collections.List<kotlin.String>, currencies: kotlin.collections.List<kotlin.String>) : GetRates200Response {
        val localVarResponse = getRatesWithHttpInfo(tokens = tokens, currencies = currencies)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetRates200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Get the token price to the currency
     * @param tokens accept ton and jetton master addresses, separated by commas
     * @param currencies accept ton and all possible fiat currencies, separated by commas
     * @return ApiResponse<GetRates200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getRatesWithHttpInfo(tokens: kotlin.collections.List<kotlin.String>, currencies: kotlin.collections.List<kotlin.String>) : ApiResponse<GetRates200Response?> {
        val localVariableConfig = getRatesRequestConfig(tokens = tokens, currencies = currencies)

        return request<Unit, GetRates200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getRates
     *
     * @param tokens accept ton and jetton master addresses, separated by commas
     * @param currencies accept ton and all possible fiat currencies, separated by commas
     * @return RequestConfig
     */
    fun getRatesRequestConfig(tokens: kotlin.collections.List<kotlin.String>, currencies: kotlin.collections.List<kotlin.String>) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("tokens", toMultiValue(tokens.toList(), "csv"))
                put("currencies", toMultiValue(currencies.toList(), "csv"))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/rates",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
