/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.tonapi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import io.tonapi.models.AccountStaking
import io.tonapi.models.GetStakingPoolHistory200Response
import io.tonapi.models.GetStakingPoolInfo200Response
import io.tonapi.models.GetStakingPools200Response
import io.tonapi.models.StatusDefaultResponse

import com.squareup.moshi.Json

import io.tonapi.infrastructure.ApiClient
import io.tonapi.infrastructure.ApiResponse
import io.tonapi.infrastructure.ClientException
import io.tonapi.infrastructure.ClientError
import io.tonapi.infrastructure.ServerException
import io.tonapi.infrastructure.ServerError
import io.tonapi.infrastructure.MultiValueMap
import io.tonapi.infrastructure.PartConfig
import io.tonapi.infrastructure.RequestConfig
import io.tonapi.infrastructure.RequestMethod
import io.tonapi.infrastructure.ResponseType
import io.tonapi.infrastructure.Success
import io.tonapi.infrastructure.toMultiValue

class StakingApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://tonapi.io")
        }
    }

    /**
     * 
     * All pools where account participates
     * @param accountId account ID
     * @return AccountStaking
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getAccountNominatorsPools(accountId: kotlin.String) : AccountStaking {
        val localVarResponse = getAccountNominatorsPoolsWithHttpInfo(accountId = accountId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AccountStaking
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * All pools where account participates
     * @param accountId account ID
     * @return ApiResponse<AccountStaking?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getAccountNominatorsPoolsWithHttpInfo(accountId: kotlin.String) : ApiResponse<AccountStaking?> {
        val localVariableConfig = getAccountNominatorsPoolsRequestConfig(accountId = accountId)

        return request<Unit, AccountStaking>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAccountNominatorsPools
     *
     * @param accountId account ID
     * @return RequestConfig
     */
    fun getAccountNominatorsPoolsRequestConfig(accountId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/staking/nominator/{account_id}/pools".replace("{"+"account_id"+"}", encodeURIComponent(accountId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Pool history
     * @param accountId account ID
     * @return GetStakingPoolHistory200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getStakingPoolHistory(accountId: kotlin.String) : GetStakingPoolHistory200Response {
        val localVarResponse = getStakingPoolHistoryWithHttpInfo(accountId = accountId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetStakingPoolHistory200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Pool history
     * @param accountId account ID
     * @return ApiResponse<GetStakingPoolHistory200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getStakingPoolHistoryWithHttpInfo(accountId: kotlin.String) : ApiResponse<GetStakingPoolHistory200Response?> {
        val localVariableConfig = getStakingPoolHistoryRequestConfig(accountId = accountId)

        return request<Unit, GetStakingPoolHistory200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getStakingPoolHistory
     *
     * @param accountId account ID
     * @return RequestConfig
     */
    fun getStakingPoolHistoryRequestConfig(accountId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/staking/pool/{account_id}/history".replace("{"+"account_id"+"}", encodeURIComponent(accountId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Stacking pool info
     * @param accountId account ID
     * @param acceptLanguage  (optional, default to "en")
     * @return GetStakingPoolInfo200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getStakingPoolInfo(accountId: kotlin.String, acceptLanguage: kotlin.String? = "en") : GetStakingPoolInfo200Response {
        val localVarResponse = getStakingPoolInfoWithHttpInfo(accountId = accountId, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetStakingPoolInfo200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Stacking pool info
     * @param accountId account ID
     * @param acceptLanguage  (optional, default to "en")
     * @return ApiResponse<GetStakingPoolInfo200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getStakingPoolInfoWithHttpInfo(accountId: kotlin.String, acceptLanguage: kotlin.String?) : ApiResponse<GetStakingPoolInfo200Response?> {
        val localVariableConfig = getStakingPoolInfoRequestConfig(accountId = accountId, acceptLanguage = acceptLanguage)

        return request<Unit, GetStakingPoolInfo200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getStakingPoolInfo
     *
     * @param accountId account ID
     * @param acceptLanguage  (optional, default to "en")
     * @return RequestConfig
     */
    fun getStakingPoolInfoRequestConfig(accountId: kotlin.String, acceptLanguage: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/staking/pool/{account_id}".replace("{"+"account_id"+"}", encodeURIComponent(accountId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * All pools available in network
     * @param availableFor account ID (optional)
     * @param includeUnverified return also pools not from white list - just compatible by interfaces (maybe dangerous!) (optional)
     * @param acceptLanguage  (optional, default to "en")
     * @return GetStakingPools200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getStakingPools(availableFor: kotlin.String? = null, includeUnverified: kotlin.Boolean? = null, acceptLanguage: kotlin.String? = "en") : GetStakingPools200Response {
        val localVarResponse = getStakingPoolsWithHttpInfo(availableFor = availableFor, includeUnverified = includeUnverified, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetStakingPools200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * All pools available in network
     * @param availableFor account ID (optional)
     * @param includeUnverified return also pools not from white list - just compatible by interfaces (maybe dangerous!) (optional)
     * @param acceptLanguage  (optional, default to "en")
     * @return ApiResponse<GetStakingPools200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getStakingPoolsWithHttpInfo(availableFor: kotlin.String?, includeUnverified: kotlin.Boolean?, acceptLanguage: kotlin.String?) : ApiResponse<GetStakingPools200Response?> {
        val localVariableConfig = getStakingPoolsRequestConfig(availableFor = availableFor, includeUnverified = includeUnverified, acceptLanguage = acceptLanguage)

        return request<Unit, GetStakingPools200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getStakingPools
     *
     * @param availableFor account ID (optional)
     * @param includeUnverified return also pools not from white list - just compatible by interfaces (maybe dangerous!) (optional)
     * @param acceptLanguage  (optional, default to "en")
     * @return RequestConfig
     */
    fun getStakingPoolsRequestConfig(availableFor: kotlin.String?, includeUnverified: kotlin.Boolean?, acceptLanguage: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (availableFor != null) {
                    put("available_for", listOf(availableFor.toString()))
                }
                if (includeUnverified != null) {
                    put("include_unverified", listOf(includeUnverified.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/staking/pools",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
